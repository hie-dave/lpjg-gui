using System.Collections;

namespace LpjGuess.Core.Interfaces.Factorial;

/// <summary>
/// Interface to a class which can generate values.
/// </summary>
public interface IValueGenerator
{
    /// <summary>
    /// Generate the values encapsulated by this generator.
    /// </summary>
    /// <returns>The values.</returns>
    IEnumerable Generate();

    /// <summary>
    /// Generate the values encapsulated by this generator as strings encoded
    /// use in an LPJ-Guess instruction file.
    /// </summary>
    /// <param name="formatProvider">The format provider to use.</param>
    /// <returns>The values.</returns>
    IEnumerable<string> GenerateStrings(IFormatProvider? formatProvider);

    /// <summary>
    /// Get the number of values generated by this generator.
    /// </summary>
    /// <returns>The number of values.</returns>
    int NumValues();
}

/// <summary>
/// Interface to a class which can generate values.
/// </summary>
/// <typeparam name="T">The type of values generated by this object.</typeparam>
public interface IValueGenerator<T> : IValueGenerator
{
    /// <summary>
    /// Generate the values encapsulated by this generator.
    /// </summary>
    /// <returns>The values.</returns>
    new IEnumerable<T> Generate();
}
