using Dave.Benchmarks.Core.Services;
using LpjGuess.Frontend.Interfaces.Presenters;
using LpjGuess.Frontend.Interfaces.Views;
using LpjGuess.Runner.Models;
using LpjGuess.Runner.Parsers;
using Microsoft.Extensions.Logging;
using InstructionFileParser = LpjGuess.Runner.Parsers.InstructionFileParser;

namespace LpjGuess.Frontend.Presenters;

/// <summary>
/// A presenter which controls an outputs view to display the raw outputs from a
/// model run.
/// </summary>
public class OutputsPresenter : PresenterBase<IOutputsView>, IOutputsPresenter
{
    /// <summary>
    /// Sites with output files written more than this number of seconds before
    /// the most recent write time of any site-level run are considered stale.
    /// </summary>
    private const int staleSiteThresholdSeconds = 300;

    /// <summary>
    /// Output files written more than this number of seconds before the 
    /// newest file are considered stale.
    /// </summary>
    private const double staleFileThresholdSeconds = 5.0;

    /// <summary>
    /// List of instruction files.
    /// </summary>
    private List<string> instructionFiles;

    /// <summary>
    /// Create a new <see cref="OutputsPresenter"/> instance.
    /// </summary>
    /// <param name="view">The view object.</param>
    public OutputsPresenter(IOutputsView view) : base(view)
    {
        instructionFiles = new List<string>();
        view.OnInstructionFileSelected.ConnectTo(OnInstructionFileSelected);
        view.OnOutputFileSelected.ConnectTo(OnOutputFileSelected);
    }

    /// <inheritdoc />
    /// <exception cref="ArgumentException">Thrown if one of the specified instruction files does not specify an output directory.</exception>
    public void Populate(IEnumerable<string> instructionFiles)
    {
        this.instructionFiles = instructionFiles.ToList();

        // Populate the view.
        view.PopulateInstructionFiles(instructionFiles);
    }

    /// <summary>
    /// Get a list of all non-stale output files for the specified instruction
    /// file.
    /// </summary>
    /// <param name="file">An instruction file.</param>
    /// <returns>A list of output files generated by the most recent model run of the given instruction file.</returns>
    private IEnumerable<string> GetOutputFiles(string file)
    {
        InstructionFileParser parser = InstructionFileParser.FromFile(file);
        InstructionParameter? outputDirectory = parser.GetTopLevelParameter("outputdirectory");
        if (outputDirectory is null)
            throw new ArgumentException($"File '{file}' does not specify an output directory");

        IEnumerable<string> outputFiles = Directory.EnumerateFiles(outputDirectory.AsString(), "*.out");

        var logger = new Logger<OutputFileTypeResolver>(new LoggerFactory());
        var resolver = new OutputFileTypeResolver(logger);
        ModelOutputParser outputParser = new ModelOutputParser(new Logger<ModelOutputParser>(new LoggerFactory()), resolver);
        DateTime latestWrite = GetMostRecentWriteTime(outputFiles);

        return outputFiles.Where(f => !IsStaleFile(f, latestWrite));
    }

    /// <summary>
    /// Checks if a file is stale by comparing its write time to the most recent write time
    /// </summary>
    /// <param name="filePath">The path to the file.</param>
    /// <param name="mostRecentWriteTime">The most recent write time.</param>
    /// <returns>True if the file is stale, false otherwise.</returns>
    private bool IsStaleFile(string filePath, DateTime mostRecentWriteTime)
    {
        FileInfo fileInfo = new(filePath);
        TimeSpan age = mostRecentWriteTime - fileInfo.LastWriteTime;
        
        return age.TotalSeconds > staleFileThresholdSeconds;
    }

    /// <summary>
    /// Gets the most recent write time from a set of output files
    /// </summary>
    /// <param name="outputFiles">The files to check.</param>
    /// <returns>The most recent write time.</returns>
    private DateTime GetMostRecentWriteTime(IEnumerable<string> outputFiles)
    {
        return outputFiles
            .Select(f => new FileInfo(f))
            .Max(f => f.LastWriteTime);
    }

    private void OnOutputFileSelected(string file)
    {
        throw new NotImplementedException();
    }

    private void OnInstructionFileSelected(string file)
    {
        throw new NotImplementedException();
    }
}
