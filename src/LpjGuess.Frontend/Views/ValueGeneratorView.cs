using LpjGuess.Frontend.Interfaces;
using LpjGuess.Frontend.Interfaces.Views;

namespace LpjGuess.Frontend.Views;

/// <summary>
/// A view for a value generator.
/// </summary>
public class ValueGeneratorView : IValueGeneratorView
{
    /// <summary>
    /// The values generated by the value generator.
    /// </summary>
    public IEnumerable<string> Values { get; private init; }

    /// <summary>
    /// The name of the value generator.
    /// </summary>
    public string Name { get; private init; }

    /// <summary>
    /// Whether all values are being displayed.
    /// </summary>
    public bool AllValues { get; private init; }

    /// <summary>
    /// The view to present the value generator on.
    /// </summary>
    public IView View { get; private init; }

    /// <summary>
    /// Create a new <see cref="ValueGeneratorView"/> instance.
    /// </summary>
    /// <param name="name">The name of the value generator.</param>
    /// <param name="allValues">Whether all values are being displayed.</param>
    /// <param name="values">The values generated by the value generator.</param>
    /// <param name="view">The view to present the value generator on.</param>
    public ValueGeneratorView(string name, bool allValues, IEnumerable<string> values, IView view)
    {
        Name = name;
        AllValues = allValues;
        Values = values;
        View = view;
    }
}
