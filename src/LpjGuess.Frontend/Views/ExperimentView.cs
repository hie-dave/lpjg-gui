using Gtk;
using LpjGuess.Core.Models.Factorial;
using LpjGuess.Frontend.Classes;
using LpjGuess.Frontend.Delegates;
using LpjGuess.Frontend.Events;
using LpjGuess.Frontend.Interfaces.Events;
using LpjGuess.Frontend.Interfaces.Views;
using LpjGuess.Frontend.Utility.Gtk;

namespace LpjGuess.Frontend.Views;

/// <summary>
/// A view which displays an experiment.
/// </summary>
public class ExperimentView : ViewBase<ScrolledWindow>, IExperimentView
{
    /// <summary>
    /// The spacing between widgets.
    /// </summary>
    private const int spacing = 6;

    /// <summary>
    /// The grid containing the controls used to customise the experiment.
    /// </summary>
    private readonly Grid grid;

    /// <summary>
    /// The entry used to edit the experiment name.
    /// </summary>
    private readonly Entry nameEntry;

    /// <summary>
    /// The entry used to edit the experiment description.
    /// </summary>
    private readonly Entry descriptionEntry;

    /// <summary>
    /// The dropdown used to select the experiment runner.
    /// </summary>
    private readonly StringDropDownView runnerDropDown;

    /// <summary>
    /// The container for the factorial view.
    /// </summary>
    private readonly Box factorialContainer;

    /// <summary>
    /// A child widget which allows the user to select which instruction files
    /// are used in the experiment.
    /// </summary>
    private readonly InstructionFileSelectionView insFileView;

    /// <summary>
    /// The view which shows a tabular list of the simulations and the changes
    /// that define them that are generated by this experiment. This has one
    /// column for simulation name, and one column for each distinct parameter.
    /// Each row shows one simulation and the changes to each parameter that
    /// define that simulation.
    /// </summary>
    private readonly CustomColumnView<SimulationDescription> simulationView;

    /// <summary>
    /// Number of rows currently in the grid.
    /// </summary>
    private int nrow;

    /// <inheritdoc />
    public Event<IModelChange<Experiment>> OnChanged { get; }

    /// <summary>
    /// Create a new <see cref="ExperimentView"/> instance.
    /// </summary>
    public ExperimentView() : base(new ScrolledWindow())
    {
        nrow = 0;
        factorialContainer = new Box();
        OnChanged = new Event<IModelChange<Experiment>>();

        // Configure the scrolled window.
        widget.HscrollbarPolicy = PolicyType.Never;
        widget.VscrollbarPolicy = PolicyType.Automatic;

        // Initialise and configure child widgets.
        grid = new Grid();
        grid.RowSpacing = spacing;
        grid.ColumnSpacing = spacing;

        nameEntry = new Entry() { Hexpand = true };
        descriptionEntry = new Entry() { Hexpand = true };
        runnerDropDown = new StringDropDownView();

        insFileView = new InstructionFileSelectionView();
        insFileView.OnSelectionChanged.ConnectTo(OnInsFilesChanged);

        simulationView = new CustomColumnView<SimulationDescription>();

        // FIXME: this won't be updated when a new runner is created. Need to
        // think about how to propagate these sorts of changes through the GUI
        // (this applies to other areas too such as instruction files).
        runnerDropDown.Populate(Configuration.Instance.Runners.Select(r => r.Name));
        runnerDropDown.OnSelectionChanged.ConnectTo(OnRunnerChanged);

        AddControl("Name", nameEntry);
        AddControl("Description", descriptionEntry);
        AddControl("Runner", runnerDropDown.GetWidget());
        AddControl("Instruction Files", insFileView);

        // Create and configure a container widget which will go inside the
        // scrolled window.
        Box container = new Box();
        container.SetOrientation(Orientation.Vertical);
        container.Spacing = spacing;

        Frame simulationsFrame = new Frame();
        simulationsFrame.Label = "Simulations";
        simulationView.MarginBottom = 4;
        simulationView.MarginTop = 4;
        simulationView.MarginStart = 4;
        simulationView.MarginEnd = 4;
        simulationsFrame.SetChild(simulationView);
        if (simulationsFrame.LabelWidget is Label simsLabel)
            simsLabel.AddCssClass(StyleClasses.Heading);

        Frame factorialFrame = new Frame();
        factorialFrame.Label = "Factors";
        factorialContainer.MarginBottom = 4;
        factorialContainer.MarginTop = 4;
        factorialContainer.MarginStart = 4;
        factorialContainer.MarginEnd = 4;
        factorialFrame.SetChild(factorialContainer);
        if (factorialFrame.LabelWidget is Label factLabel)
            factLabel.AddCssClass(StyleClasses.Heading);

        Frame parametersFrame = new Frame();
        parametersFrame.Label = "Configuration";
        grid.MarginBottom = 4;
        grid.MarginTop = 4;
        grid.MarginStart = 4;
        grid.MarginEnd = 4;
        parametersFrame.SetChild(grid);
        if (parametersFrame.LabelWidget is Label paramsLabel)
            paramsLabel.AddCssClass(StyleClasses.Heading);

        // Pack child widgets into the container.
        container.Append(parametersFrame);
        container.Append(factorialFrame);
        container.Append(simulationsFrame);

        // Pack the container into the scrolled window.
        widget.Child = container;

        // Connect event handlers.
        ConnectEvents();
    }

    /// <inheritdoc />
    public override void Dispose()
    {
        DisconnectEvents();
        OnChanged.Dispose();
        base.Dispose();
    }

    /// <inheritdoc />
    public void Populate(
        string name,
        string description,
        string runner,
        IEnumerable<(string, bool)> instructionFiles,
        IEnumerable<string> pfts)
    {
        nameEntry.SetText(name);
        descriptionEntry.SetText(description);

        // If this runner doesn't exist, it won't be selected. This also won't
        // throw - nothing will happen.
        runnerDropDown.Select(runner);

        UpdateInstructionFiles(instructionFiles);
    }

    /// <inheritdoc />
    public void PopulateSimulations(IEnumerable<SimulationDescription> simulations)
    {
        simulationView.Clear();

        // One column for simulation name.
        simulationView.AddColumn("Simulation", CreateSimulationTableLabel, (s, w) => w.SetText(s.Name));

        List<string> parameters = simulations.SelectMany(s => s.Changes
                .Select(c => c.ParameterName))
            .Distinct()
            .ToList();

        // It's possible that some parameters are not modified by some generated
        // simulations. In such case, we just display "-" in that cell to
        // indicate this.
        foreach (string parameter in parameters)
            simulationView.AddColumn(parameter, CreateSimulationTableLabel, (s, w) => w.SetText(s.Changes
                .Where(c => c.ParameterName == parameter)
                .Select(c => c.Value)
                .FirstOrDefault() ?? "-"));
        simulationView.Populate(simulations);
    }

    /// <summary>
    /// Create a label for the simulation table.
    /// </summary>
    /// <returns>A label widget.</returns>
    private Label CreateSimulationTableLabel()
    {
        Label label = new Label();
        label.Halign = Align.Start;
        return label;
    }

    /// <inheritdoc />
    public void UpdateInstructionFiles(IEnumerable<(string, bool)> instructionFiles)
    {
        insFileView.Populate(
            instructionFiles.Select(i => i.Item1),
            instructionFiles.Where(i => i.Item2).Select(i => i.Item1));
    }

    /// <inheritdoc />
    public void SetFactorialView(IFactorialView factorialView)
    {
        Widget? child;
        while ((child = factorialContainer.GetFirstChild()) != null)
            factorialContainer.Remove(child);

        factorialContainer.Append(factorialView.GetWidget());
    }

    /// <summary>
    /// Add a control to the next row in the grid.
    /// </summary>
    /// <param name="title">The title of the control.</param>
    /// <param name="widget">The widget to add.</param>
    private void AddControl(string title, Widget widget)
    {
        Label label = Label.New($"{title}:");
        label.Halign = Align.Start;
        grid.Attach(label, 0, nrow, 1, 1);
        grid.Attach(widget, 1, nrow, 1, 1);
        nrow++;
    }

    private void ConnectEvents()
    {
        nameEntry.OnActivate += OnNameChanged;
        descriptionEntry.OnActivate += OnDescriptionChanged;
    }

    private void DisconnectEvents()
    {
        nameEntry.OnActivate -= OnNameChanged;
        descriptionEntry.OnActivate -= OnDescriptionChanged;
    }

    /// <summary>
    /// Called when the instruction files are changed by the user.
    /// </summary>
    /// <param name="insFiles">The instruction files.</param>
    private void OnInsFilesChanged(IEnumerable<string> insFiles)
    {
        IEnumerable<string> disabled = insFileView.GetSelection()
            .Where(s => !s.Item2) // Where not enabled
            .Select(s => s.Item1) // Select instruction file
            .ToList();
        OnChanged.Invoke(new ModelChangeEventArgs<Experiment, IEnumerable<string>>(
            e => e.DisabledInsFiles,
            (e, i) => e.DisabledInsFiles = i.ToList(),
            disabled));
    }

    /// <summary>
    /// Called when the runner is changed by the user.
    /// </summary>
    /// <param name="runnerName">The name of the runner.</param>
    private void OnRunnerChanged(string runnerName)
    {
        OnChanged.Invoke(new ModelChangeEventArgs<Experiment, string>(
            e => e.Runner,
            (e, r) => e.Runner = r,
            runnerName));
    }

    /// <summary>
    /// Called when the description is changed by the user.
    /// </summary>
    /// <param name="sender">Sender object.</param>
    /// <param name="args">Event data.</param>
    private void OnDescriptionChanged(Entry sender, EventArgs args)
    {
        try
        {
            OnChanged.Invoke(new ModelChangeEventArgs<Experiment, string>(
                e => e.Description,
                (e, d) => e.Description = d,
                sender.GetText()));
        }
        catch (Exception error)
        {
            MainView.Instance.ReportError(error);
        }
    }

    /// <summary>
    /// Called when the name is changed by the user.
    /// </summary>
    /// <param name="sender">Sender object.</param>
    /// <param name="args">Event data.</param>
    private void OnNameChanged(Entry sender, EventArgs args)
    {
        try
        {
            OnChanged.Invoke(new ModelChangeEventArgs<Experiment, string>(
                e => e.Name,
                (e, n) => e.Name = n,
                sender.GetText()));
        }
        catch (Exception error)
        {
            MainView.Instance.ReportError(error);
        }
    }
}
